(function($) {
    'use strict';

    class MultiSelect {
        constructor(element, options = {}) {
            this.$element = $(element);
            if (!this.$element.length) throw new Error(`MultiSelect: Element "${element}" not found`);
            
            this.element = this.$element[0];
            this.$container = this.$element.closest('.multi-select-container');
            
            if (!this.$container.length) {
                this.$container = $('<div class="multi-select-container"></div>');
                this.$element.parent().insertBefore(this.$container);
                this.$container.append(this.$element);
            }
            
            this.isMultiple = this.$element.attr('multiple') !== undefined;
            
            this.options = $.extend({
                placeholder: this.isMultiple ? 'Select options...' : 'Choose an option...',
                searchable: this.$element.data('search') !== false,
                selectAll: options.selectAll !== false && this.isMultiple,
                clearAll: options.clearAll !== false,
                maxSelection: options.maxSelection || null,
                remote: options.remote || null,
                searchDelay: options.searchDelay || 300,
                noResultsText: 'No results found',
                loadingText: 'Loading...',
                searchPlaceholder: 'Search options...',
                selectAllText: 'Select All',
                clearAllText: 'Clear All',
                tagMaxWidth: '200px',
                dropdownMaxHeight: '300px',
                optionsMaxHeight: '200px'
            }, options);
            
            this.isOpen = false;
            this.focusedIndex = -1;
            this.selectedValues = [];
            this.selectedValue = null;
            this.isLoading = false;
            this.searchTimeout = null;
            this.originalOptions = [];
            
            this.init();
            this.bindEvents();
            this.updateFromSelect();
            this.storeOriginalOptions();
        }
        
        init() {
            this.createMultiSelect();
            this.createDropdown();
            this.updateSelection();
        }
        
        createMultiSelect() {
            this.$trigger = $('<div class="multi-select-trigger" tabindex="0" role="combobox" aria-expanded="false" aria-haspopup="listbox"></div>');
            this.$selection = $('<div class="multi-select-selection"></div>');
            this.$placeholder = $(`<span class="multi-select-placeholder">${this.options.placeholder}</span>`);
            this.$arrow = $('<i class="bi bi-chevron-down multi-select-arrow" aria-hidden="true"></i>');
            
            this.$selection.append(this.$placeholder);
            this.$trigger.append(this.$selection).append(this.$arrow);
            this.$container.append(this.$trigger);
            this.$element.addClass('d-none');
        }
        
        createDropdown() {
            this.$dropdown = $('<div class="multi-select-dropdown" role="listbox" aria-multiselectable="' + this.isMultiple.toString() + '"></div>');
            
            if (this.options.searchable) this.createSearchBox();
            this.createOptions();
            if (this.options.selectAll || this.options.clearAll) this.createActions();
            
            this.$container.append(this.$dropdown);
        }
        
        createSearchBox() {
            const $searchContainer = $('<div class="multi-select-search"></div>');
            const $inputWrapper = $('<div class="position-relative w-100"></div>');
            
            this.$searchInput = $('<input type="text" class="form-control form-control-sm" role="searchbox" aria-label="Search options">')
                .attr('placeholder', this.options.searchPlaceholder);
            
            const $searchClearBtn = $('<i class="bi bi-x multi-select-search-clear" aria-label="Clear search"></i>');
            
            $inputWrapper.append(this.$searchInput).append($searchClearBtn);
            $searchContainer.append($inputWrapper);
            this.$dropdown.append($searchContainer);
        }
        
        createOptions() {
            this.$optionsContainer = $('<div class="multi-select-options" role="group"></div>');
            
            this.$element.find('option').each((index, option) => {
                const optionObj = {
                    value: option.value,
                    text: option.text,
                    selected: option.selected,
                    icon: $(option).data('icon') || null
                };
                
                this.$optionsContainer.append(this.createOptionElement(optionObj, index));
            });
            
            this.$dropdown.append(this.$optionsContainer);
        }
        
        createOptionElement(option, index) {
            let optionValue, optionText, optionSelected, optionIcon;
            
            if (option instanceof HTMLOptionElement) {
                optionValue = option.value;
                optionText = option.text;
                optionSelected = option.selected;
                optionIcon = $(option).data('icon') || null;
            } else {
                optionValue = option.value;
                optionText = option.text || option.label;
                optionSelected = !!option.selected;
                optionIcon = option.icon || null;
            }
            
            const $optionDiv = $('<div class="multi-select-option" role="option" tabindex="-1"></div>')
                .data('value', optionValue)
                .data('index', index)
                .data('icon', optionIcon)
                .attr('aria-selected', optionSelected.toString());
            
            const $leftContainer = $('<div class="multi-select-option-left"></div>');
            
            if (optionIcon) {
                const $iconDiv = $('<div class="multi-select-option-icon"></div>');
                
                if (optionIcon.startsWith('http') || optionIcon.startsWith('data:') || 
                    optionIcon.startsWith('./') || optionIcon.startsWith('/')) {
                    $iconDiv.append($('<img>').attr('src', optionIcon).attr('alt', ''));
                } else {
                    $iconDiv.append($('<i>').addClass(optionIcon));
                }
                
                $leftContainer.append($iconDiv);
            }
            
            $leftContainer.append($('<span class="multi-select-option-text"></span>').text(optionText));
            $optionDiv.append($leftContainer);
            
            if (this.isMultiple) {
                $optionDiv.append(
                    $('<input type="checkbox" class="form-check-input" aria-hidden="true">')
                    .prop('checked', optionSelected)
                );
            }
            
            if (optionSelected) $optionDiv.addClass('selected');
            
            return $optionDiv;
        }
        
        createActions() {
            if (!this.isMultiple) return;
            
            const $actionsContainer = $('<div class="multi-select-actions"></div>');
            
            if (this.options.selectAll) {
                $actionsContainer.append(
                    $('<button type="button" class="btn btn-sm btn-outline-primary"></button>')
                    .text(this.options.selectAllText)
                    .on('click', () => this.selectAll())
                );
            }
            
            if (this.options.clearAll) {
                $actionsContainer.append(
                    $('<button type="button" class="btn btn-sm btn-outline-secondary"></button>')
                    .text(this.options.clearAllText)
                    .on('click', () => this.clearAll())
                );
            }
            
            this.$dropdown.append($actionsContainer);
        }
        
        bindEvents() {
            this.$trigger.on('click', (e) => {
                if ($(e.target).hasClass('multi-select-clear')) return;
                e.preventDefault();
                this.toggle();
            });

            this.$container
                .on('click', '.multi-select-clear', (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    this.clearSingleSelection();
                    return false;
                })
                .on('click', '.multi-select-tag-remove', (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    const $tag = $(e.target).closest('.multi-select-tag');
                    const value = $tag.data('value');
                    if (value) this.removeTag(value);
                    return false;
                })
                .on('click', '.multi-select-search-clear', (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    if (this.$searchInput) this.$searchInput.val('').trigger('input').focus();
                    return false;
                });
            
            this.$trigger.on('keydown', (e) => this.handleKeydown(e));
            
            if (this.$searchInput) {
                this.$searchInput.on('input', (e) => {
                    const query = e.target.value;
                    
                    if (this.options.remote) {
                        if (this.searchTimeout) clearTimeout(this.searchTimeout);
                        this.searchTimeout = setTimeout(() => this.remoteSearch(query), this.options.searchDelay);
                    } else {
                        this.search(query);
                    }
                });
                
                this.$searchInput.on('keydown', (e) => {
                    if (e.key === 'Escape') this.close();
                });
            }
            
            this.$optionsContainer.on('click', '.multi-select-option', (e) => {
                if ($(e.currentTarget).hasClass('disabled')) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
                this.toggleOption($(e.currentTarget));
            });
            
            this.$optionsContainer.on('click', '.multi-select-option input[type="checkbox"]', (e) => {
                if ($(e.target).is(':disabled')) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
            });
            
            $(document).on('click.multiselect', (e) => {
                if (!this.$container.is(e.target) && this.$container.has(e.target).length === 0) {
                    this.close();
                }
            });
            
            this.$element
                .on('invalid', () => this.$trigger.addClass('is-invalid'))
                .closest('form')
                .on('reset.multiselect', () => setTimeout(() => this.reset(), 0));
        }
        
        handleKeydown(e) {
            switch (e.key) {
                case 'Enter':
                case ' ':
                    e.preventDefault();
                    if (this.isOpen) {
                        const $focused = this.$optionsContainer.find('.focused');
                        if ($focused.length) {
                            this.toggleOption($focused);
                        }
                    } else {
                        this.open();
                    }
                    break;
                case 'Escape':
                    if (this.isOpen) {
                        e.preventDefault();
                        this.close();
                    }
                    break;
                case 'ArrowDown':
                    e.preventDefault();
                    if (this.isOpen) {
                        this.focusNextOption();
                    } else {
                        this.open();
                    }
                    break;
                case 'ArrowUp':
                    e.preventDefault();
                    if (this.isOpen) {
                        this.focusPrevOption();
                    } else {
                        this.open();
                    }
                    break;
                case 'Tab':
                    if (this.isOpen) {
                        e.preventDefault();
                        this.focusNextOption();
                    }
                    break;
            }
        }
        
        focusNextOption() {
            const options = this.$optionsContainer.find('.multi-select-option:visible:not(.disabled)');
            if (!options.length) return;
            
            this.$optionsContainer.find('.focused').removeClass('focused');
            
            if (this.focusedIndex < options.length - 1) {
                this.focusedIndex++;
            } else {
                this.focusedIndex = 0;
            }
            
            const $option = options.eq(this.focusedIndex);
            $option.addClass('focused');
            this.scrollToOption($option);
        }
        
        focusPrevOption() {
            const options = this.$optionsContainer.find('.multi-select-option:visible:not(.disabled)');
            if (!options.length) return;
            
            this.$optionsContainer.find('.focused').removeClass('focused');
            
            if (this.focusedIndex > 0) {
                this.focusedIndex--;
            } else {
                this.focusedIndex = options.length - 1;
            }
            
            const $option = options.eq(this.focusedIndex);
            $option.addClass('focused');
            this.scrollToOption($option);
        }
        
        scrollToOption($option) {
            if (!$option.length) return;
            
            const container = this.$optionsContainer[0];
            const optionTop = $option[0].offsetTop;
            const optionBottom = optionTop + $option[0].offsetHeight;
            
            if (optionTop < container.scrollTop) {
                container.scrollTop = optionTop;
            } else if (optionBottom > container.scrollTop + container.clientHeight) {
                container.scrollTop = optionBottom - container.clientHeight;
            }
        }
        
        toggle() {
            this.isOpen ? this.close() : this.open();
        }
        
        open() {
            if (this.isOpen) return;
            
            this.isOpen = true;
            this.$dropdown.addClass('show');
            this.$trigger
                .addClass('active')
                .attr('aria-expanded', 'true');
            
            if (this.$searchInput) {
                this.$searchInput.focus();
            }
            
            this.$element.trigger('multiselect:open');
        }
        
        close() {
            if (!this.isOpen) return;
            
            this.isOpen = false;
            this.$dropdown.removeClass('show');
            this.$trigger
                .removeClass('active')
                .attr('aria-expanded', 'false');
            
            this.$optionsContainer.find('.focused').removeClass('focused');
            this.focusedIndex = -1;
            
            if (this.$searchInput) {
                this.$searchInput.val('');
                this.search('');
            }
            
            this.$element.trigger('multiselect:close');
        }
        
        toggleOption($optionElement) {
            if (!$optionElement || !$optionElement.length) return;
            
            if ($optionElement.hasClass('disabled')) return;
            
            const value = $optionElement.data('value');
            const $option = this.$element.find(`option[value="${value}"]`);
            
            if (!$option.length) return;
            
            const isSelected = $optionElement.hasClass('selected');
            
            if (isSelected) {
                $option.prop('selected', false);
                $optionElement.removeClass('selected').attr('aria-selected', 'false');
                
                if (this.isMultiple) {
                    const $checkbox = $optionElement.find('input[type="checkbox"]');
                    if ($checkbox.length) $checkbox.prop('checked', false);
                    this.selectedValues = this.selectedValues.filter(v => v !== value);
                } else {
                    this.selectedValue = null;
                }
            } else {
                if (!this.isMultiple) {
                    this.$optionsContainer.find('.multi-select-option').removeClass('selected').attr('aria-selected', 'false');
                    this.$element.find('option').prop('selected', false);
                    this.selectedValue = value;
                } else {
                    if (this.options.maxSelection && this.selectedValues.length >= this.options.maxSelection) {
                        this.$element.trigger('multiselect:maxselection', { max: this.options.maxSelection });
                        return;
                    }
                    this.selectedValues.push(value);
                }
                
                $option.prop('selected', true);
                $optionElement.addClass('selected').attr('aria-selected', 'true');
                
                if (this.isMultiple) {
                    const $checkbox = $optionElement.find('input[type="checkbox"]');
                    if ($checkbox.length) $checkbox.prop('checked', true);
                } else {
                    this.close();
                }
            }
            
            this.$trigger.removeClass('is-invalid');
            this.updateSelection();
            this.$element.trigger('change').trigger('multiselect:change', { value: this.getValue() });
        }
        
        search(query) {
            const $options = this.$optionsContainer.find('.multi-select-option').not('.multi-select-no-results, .multi-select-loading');
            let hasVisibleOptions = false;
            
            $options.each((index, option) => {
                const $option = $(option);
                const text = $option.text().toLowerCase();
                const matches = text.includes(query.toLowerCase());
                
                $option.toggle(matches);
                if (matches) hasVisibleOptions = true;
            });
            
            this.toggleNoResults(!hasVisibleOptions && query.length > 0);
            this.focusedIndex = -1;
        }
        
        async remoteSearch(query) {
            if (!this.options.remote || typeof this.options.remote !== 'function') return;
            
            this.showLoading();
            
            try {
                const results = await this.options.remote(query);
                this.populateOptions(results);
            } catch (error) {
                this.showNoResults();
                this.$element.trigger('multiselect:error', { error });
            } finally {
                this.hideLoading();
            }
        }
        
        showLoading() {
            this.isLoading = true;
            this.hideNoResults();
            
            const loadingSelector = '.multi-select-loading';
            if (!this.$optionsContainer.find(loadingSelector).length) {
                const $loadingElement = $(`<div class="${loadingSelector.substring(1)}"><div class="spinner"></div>${this.options.loadingText}</div>`);
                this.$optionsContainer.append($loadingElement);
            }
        }
        
        hideLoading() {
            this.isLoading = false;
            this.$optionsContainer.find('.multi-select-loading').remove();
        }
        
        toggleNoResults(show) {
            const noResultsSelector = '.multi-select-no-results';
            const $noResultsMsg = this.$optionsContainer.find(noResultsSelector);
            
            if (show && !$noResultsMsg.length) {
                this.$optionsContainer.append(
                    $(`<div class="${noResultsSelector.substring(1)}"><i class="bi bi-search me-2"></i>${this.options.noResultsText}</div>`)
                );
            } else if (!show && $noResultsMsg.length) {
                $noResultsMsg.remove();
            }
        }
        
        hideNoResults() {
            this.$optionsContainer.find('.multi-select-no-results').remove();
        }
        
        selectAll() {
            if (!this.isMultiple) return;
            
            this.$element.find('option').prop('selected', true);
            this.$optionsContainer.find('.multi-select-option').addClass('selected').attr('aria-selected', 'true');
            this.$optionsContainer.find('input[type="checkbox"]').prop('checked', true);
            
            this.updateFromSelect();
            this.$element.trigger('change').trigger('multiselect:selectall');
        }
        
        clearAll() {
            this.$element.find('option').prop('selected', false);
            
            if (this.isMultiple) {
                this.selectedValues = [];
                this.$optionsContainer.find('.multi-select-option').removeClass('selected').attr('aria-selected', 'false');
                this.$optionsContainer.find('input[type="checkbox"]').prop('checked', false);
            } else {
                this.selectedValue = null;
                this.$optionsContainer.find('.multi-select-option').removeClass('selected').attr('aria-selected', 'false');
            }
            
            this.updateSelection();
            this.$element.trigger('change').trigger('multiselect:clearall');
        }
        
        async loadData(url, params = {}) {
            this.showLoading();
            
            try {
                const queryString = new URLSearchParams(params).toString();
                const fullUrl = queryString ? `${url}?${queryString}` : url;
                
                const response = await fetch(fullUrl);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                
                const data = await response.json();
                
                if (data.options && Array.isArray(data.options)) {
                    this.populateOptions(data.options);
                } else if (Array.isArray(data)) {
                    this.populateOptions(data);
                } else {
                    throw new Error('Invalid data format received');
                }
                
                this.$element.trigger('multiselect:dataloaded', { data });
            } catch (error) {
                this.showNoResults();
                this.$element.trigger('multiselect:dataerror', { error });
            } finally {
                this.hideLoading();
            }
        }
        
        updateSelection() {
            this.$selection.empty();
            
            if (this.isMultiple) {
                if (!this.selectedValues.length) {
                    this.$selection.append(this.$placeholder);
                } else {
                    this.selectedValues.forEach(value => {
                        const $option = this.$element.find(`option[value="${value}"]`);
                        if ($option.length) {
                            this.$selection.append(this.createTag($option.text(), value));
                        }
                    });
                }
            } else {
                if (!this.selectedValue) {
                    this.$selection.append(this.$placeholder);
                } else {
                    const $option = this.$element.find(`option[value="${this.selectedValue}"]`);
                    if ($option.length) {
                        const $singleContainer = $('<div class="multi-select-single-container"></div>');
                        const $selectedValue = $('<span class="multi-select-single-value"></span>');
                        const $clearBtn = $('<i class="bi bi-x multi-select-clear" aria-label="Clear selection" data-value="' + this.selectedValue + '"></i>');
                        
                        let icon = null;
                        const $optElement = this.$optionsContainer.find(`[data-value="${this.selectedValue}"]`);
                        if ($optElement.length) {
                            icon = $optElement.data('icon');
                        }
                        
                        if (!icon) {
                            icon = $option.data('icon');
                        }
                        
                        if (icon) {
                            const $iconDiv = $('<div class="multi-select-single-icon"></div>');
                            
                            if (icon.startsWith('http') || icon.startsWith('data:') || 
                                icon.startsWith('./') || icon.startsWith('/')) {
                                $iconDiv.append($('<img>').attr('src', icon).attr('alt', ''));
                            } else {
                                $iconDiv.append($('<i>').addClass(icon));
                            }
                            
                            $selectedValue.append($iconDiv);
                        }
                        
                        $selectedValue.append($('<span></span>').text($option.text()));
                        $singleContainer.append($selectedValue).append($clearBtn);
                        this.$selection.append($singleContainer);
                    }
                }
            }
            
            this.updateOptionStates();
        }
        
        updateOptionStates() {
            if (!this.isMultiple || !this.options.maxSelection) return;
            
            const isMaxReached = this.selectedValues.length >= this.options.maxSelection;
            
            this.$optionsContainer.find('.multi-select-option').each((index, element) => {
                const $option = $(element);
                const isSelected = $option.hasClass('selected');
                const $checkbox = $option.find('input[type="checkbox"]');
                
                if (isMaxReached && !isSelected) {
                    $option.addClass('disabled').attr('aria-disabled', 'true');
                    if ($checkbox.length) {
                        $checkbox.prop('disabled', true);
                    }
                } else {
                    $option.removeClass('disabled').attr('aria-disabled', 'false');
                    if ($checkbox.length) {
                        $checkbox.prop('disabled', false);
                    }
                }
            });
        }
        
        createTag(text, value) {
            const $tag = $('<span class="multi-select-tag" data-value="' + value + '"></span>');
            const $tagText = $('<span class="multi-select-tag-text"></span>').text(text).attr('title', text);
            const $removeBtn = $('<i class="bi bi-x multi-select-tag-remove" aria-label="Remove ' + text + '"></i>');
            
            let icon = null;
            
            const $dropdownOption = this.$optionsContainer.find(`[data-value="${value}"]`);
            if ($dropdownOption.length) {
                icon = $dropdownOption.data('icon');
            }
            
            if (!icon) {
                const $selectOption = this.$element.find(`option[value="${value}"]`);
                if ($selectOption.length) {
                    icon = $selectOption.data('icon');
                }
            }
            
            if (icon) {
                const $iconDiv = $('<div class="multi-select-tag-icon"></div>');
                
                if (icon.startsWith('http') || icon.startsWith('data:') || 
                    icon.startsWith('./') || icon.startsWith('/')) {
                    $iconDiv.append($('<img>').attr('src', icon).attr('alt', ''));
                } else {
                    $iconDiv.append($('<i>').addClass(icon));
                }
                
                $tag.append($iconDiv);
            }
            
            return $tag.append($tagText).append($removeBtn);
        }
        
        removeTag(value) {
            const $option = this.$element.find(`option[value="${value}"]`);
            const $optionElement = this.$optionsContainer.find(`[data-value="${value}"]`);
            
            if ($option.length) {
                $option.prop('selected', false);
                
                if (this.isMultiple) {
                    const $checkbox = $optionElement.find('input[type="checkbox"]');
                    if ($checkbox.length) $checkbox.prop('checked', false);
                    this.selectedValues = this.selectedValues.filter(v => v !== value);
                } else {
                    this.selectedValue = null;
                }
                
                if ($optionElement.length) {
                    $optionElement.removeClass('selected').attr('aria-selected', 'false');
                }
                
                this.updateSelection();
                this.$element.trigger('change').trigger('multiselect:tagremoved', { value });
            }
        }
        
        clearSingleSelection() {
            this.selectedValue = null;
            this.$element.find('option').prop('selected', false);
            this.$optionsContainer.find('.multi-select-option').removeClass('selected').attr('aria-selected', 'false');
            this.updateSelection();
            this.$element.trigger('change').trigger('multiselect:cleared');
        }
        
        clearSelection() {
            this.isMultiple ? this.clearAll() : this.clearSingleSelection();
        }
        
        updateFromSelect() {
            if (this.isMultiple) {
                this.selectedValues = [];
                this.$element.find('option:selected').each((i, option) => {
                    this.selectedValues.push(option.value);
                });
            } else {
                const $selectedOption = this.$element.find('option:selected');
                this.selectedValue = $selectedOption.length ? $selectedOption.val() : null;
            }
            
            this.updateSelection();
        }
        
        storeOriginalOptions() {
            this.originalOptions = this.$element.find('option').map(function() {
                return {
                    value: this.value,
                    text: this.text,
                    selected: this.selected
                };
            }).get();
        }
        
        populateOptions(options = []) {
            this.$element.empty();
            this.$optionsContainer.empty();
            
            options.forEach((option, index) => {
                const $option = $('<option></option>')
                    .val(option.value)
                    .text(option.text || option.label)
                    .prop('selected', !!option.selected);
                
                if (option.icon) {
                    $option.data('icon', option.icon);
                }
                
                this.$element.append($option);
                
                const optionObj = {
                    value: option.value,
                    text: option.text || option.label,
                    selected: !!option.selected,
                    icon: option.icon || null
                };
                
                const $optionElement = this.createOptionElement(optionObj, index);
                this.$optionsContainer.append($optionElement);
            });
            
            this.updateFromSelect();
        }
        
        addOption(option) {
            const $option = $('<option></option>')
                .val(option.value)
                .text(option.text || option.label)
                .prop('selected', !!option.selected);
            
            if (option.icon) {
                $option.data('icon', option.icon);
            }
            
            this.$element.append($option);
            
            const index = this.$element.find('option').length - 1;
            
            const optionObj = {
                value: option.value,
                text: option.text || option.label,
                selected: !!option.selected,
                icon: option.icon || null
            };
            
            const $optionElement = this.createOptionElement(optionObj, index);
            this.$optionsContainer.append($optionElement);
            
            if (option.selected) {
                this.updateFromSelect();
            }
            
            this.$element.trigger('multiselect:optionadded', { option });
            return $option;
        }
        
        removeOption(value) {
            this.$element.find(`option[value="${value}"]`).remove();
            this.$optionsContainer.find(`[data-value="${value}"]`).remove();
            
            if (this.isMultiple) {
                this.selectedValues = this.selectedValues.filter(v => v !== value);
            } else if (this.selectedValue === value) {
                this.selectedValue = null;
            }
            
            this.updateSelection();
            this.$element.trigger('multiselect:optionremoved', { value });
        }
        
        clearOptions() {
            this.$element.empty();
            this.$optionsContainer.empty();
            this.selectedValues = [];
            this.selectedValue = null;
            this.updateSelection();
            this.$element.trigger('multiselect:optionscleared');
        }
        
        refreshOptions() {
            this.$optionsContainer.empty();
            this.$element.find('option').each((index, option) => {
                this.$optionsContainer.append(this.createOptionElement(option, index));
            });
            this.updateFromSelect();
        }
        
        getValue() {
            if (this.isMultiple) {
                return this.selectedValues;
            } else {
                return this.selectedValue;
            }
        }
        
        setValue(value) {
            if (Array.isArray(value) && this.isMultiple) {
                this.$element.find('option').prop('selected', false);
                value.forEach(val => {
                    this.$element.find(`option[value="${val}"]`).prop('selected', true);
                });
            } else if (!Array.isArray(value) && !this.isMultiple) {
                this.$element.find('option').prop('selected', false);
                this.$element.find(`option[value="${value}"]`).prop('selected', true);
            }
            
            this.updateFromSelect();
            this.$element.trigger('change').trigger('multiselect:valuechanged', { value: this.getValue() });
        }
        
        reset() {
            this.clearAll();
            this.originalOptions.forEach(optionData => {
                if (optionData.selected) {
                    if (this.isMultiple) {
                        this.selectedValues.push(optionData.value);
                    } else {
                        this.selectedValue = optionData.value;
                    }
                }
            });
            this.updateFromSelect();
        }
        
        enable() {
            this.$container.removeClass('disabled');
            this.$trigger.attr('tabindex', '0');
            this.$element.prop('disabled', false);
        }
        
        disable() {
            this.close();
            this.$container.addClass('disabled');
            this.$trigger.attr('tabindex', '-1');
            this.$element.prop('disabled', true);
        }
        
        destroy() {
            this.close();
            
            this.$trigger.off();
            this.$container.off();
            this.$optionsContainer.off();
            $(document).off('click.multiselect');
            this.$element.off('invalid');
            this.$element.closest('form').off('reset.multiselect');
            
            this.$element.removeClass('d-none').insertAfter(this.$container);
            this.$container.remove();
            
            delete this.element._multiSelect;
            
            return this.$element;
        }
    }
    
    $.fn.multiSelect = function(options) {
        return this.each(function() {
            if (!this._multiSelect) {
                this._multiSelect = new MultiSelect(this, options);
            }
        });
    };
    
    MultiSelect.autoInit = function(selector = '.multi-select-container select') {
        return $(selector).filter(function() {
            return !this._multiSelect;
        }).map(function() {
            const instance = new MultiSelect(this);
            this._multiSelect = instance;
            return instance;
        }).get();
    };
    
    window.MultiSelect = MultiSelect;
})(jQuery);
